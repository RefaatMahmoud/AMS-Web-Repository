swagger: '2.0'
info:
  description: This is Medical Faculty API and Base  URL / http://syntax-eg.esy.es
  version: 1.0.0
  title: Simple Graduatopn Project API
  # put the contact info for your development or API team
  contact:
    email: refaat.aish.fciscu1@gmail.com

# tags are used for organizing operations
tags:
- name: admin
- name: student
- name: instructor
- name: adminLogin
- name: studentLogin
- name: instructorLogin
- name: admin_Questions
- name: student_Questions
- name: students_in_Location
- name: schedule
- name: subjects
- name: activity_Type
- name: membersRole
- name: locationsName
- name: schedulesGroupNumber
- name: subjectsGroupNumber 

# - name: students

paths:
#################################
######### start Admin ###########
#################################
  /api/admin:
    get:
      tags:
      - admin
      summary: Get all admins 
      description: |
        this link will return json data for all admins in system
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/admin'
              
    post:
      tags:
      - admin
      summary: Create a new admin into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: admin
        description: admin to add
        schema:
          $ref: '#/definitions/admin'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        
  /api/admin/{id}:
    get:
      tags:
      - admin
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get admin
      description: |
        get single admin by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
          
    delete:
      tags:
      - admin
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: delete admin
      description: |
        delete admin by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is deleted successfully
          
    put:
      tags:
      - admin
      summary: Update an existing admin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path 
        type: number
        required: true 
      - in: body
        name: admin
        description: admin to update
        schema:
          $ref: '#/definitions/admin'
      responses:
        200:
          description: item updated successfully
          
          
  /api/adminLogin:      
    post:
      tags:
      - adminLogin
      summary: Admin Login into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: adminLogin
        description: admin to login
        schema:
          $ref: '#/definitions/adminLogin'
      responses:
        200:
          description: status ok
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

#################################
######### start students ########
#################################  
  /api/students:
    get:
      tags:
      - student
      summary: get all students 
      description: |
        this link will return json data for all students in system
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/student'
    post:
      tags:
      - student
      summary: adds an new students into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: students
        description: admin to add
        schema:
          $ref: '#/definitions/student'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
  /api/students/{id}:
    get:
      tags:
      - student
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get student
      description: |
        get student by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
          
  /api/studentLogin:      
    post:
      tags:
      - studentLogin
      summary: student Login into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: studentLogin
        description: admin to login
        schema:
          $ref: '#/definitions/studentLogin'
      responses:
        200:
          description: status ok
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
  /api/students_in_Location:
    get:
      tags:
      - students_in_Location
      summary: Get All Students in Current Location
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: students_in_Location
        description: Get All Students in Current Location in same Lecture and connected to same Router
        schema:
          $ref: '#/definitions/students_in_Location'
      responses:
        200:
          description: status ok
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
    post:
      tags:
      - students_in_Location
      summary: Create Student in Current Location
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: students_in_Location
        description: add new student when he attend the lecture and connect to router in this lecture
        schema:
          $ref: '#/definitions/students_in_Location'
      responses:
        200:
          description: status ok
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
  /api/students_in_Location/{id}:
    get:
      tags:
      - students_in_Location
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get students_in_Location
      description: |
        get students_in_Location by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
    
    put:
      tags:
      - students_in_Location
      summary: Update an students_in_Location
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path 
        type: number
        required: true 
      - in: body
        name: students_in_Location
        description: admin to update
        schema:
          $ref: '#/definitions/students_in_Location'
      responses:
        200:
          description: student in location updated successfully  
          
    delete:
      tags:
      - students_in_Location
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: delete student if he disconnect from router
      description: |
        Delete student by id if he outside the lecture or disconnected from router
      produces:
      - application/json
      responses:
        200:
          description: that's mean is deleted successfully
    
    
  /api/students_in_Location/groupNumber/{id}:
    get:
      tags:
      - students_in_Location
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get All students in same leve and online
      description: |
        get students_in_Location in same level by number
        Example is http://syntax-eg.esy.es/api/students_in_Location/groupNumber/1
        will get all subjects For First Level and with status = 1 
        Example is http://syntax-eg.esy.es/api/students_in_Location/groupNumber/2
        will get all subjects For second Level and with status = 1
        ...
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
  
  
#################################
######## start instructors ######
#################################
  /api/instructors:
    get:
      tags:
      - instructor
      summary: get all instructors 
      description: |
        this link will return json data for all instructors in system
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/instructor'
              
    post:
      tags:
      - instructor
      summary: adds an new instructors into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: instructors
        description: instructors to add
        schema:
          $ref: '#/definitions/instructor'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  
  /api/instructors/{id}:
    get:
      tags:
      - instructor
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get instructor
      description: |
        get instructor by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
          
  /api/instructorLogin:      
    post:
      tags:
      - instructorLogin
      summary: Admin Login into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: instructorLogin
        description: admin to login
        schema:
          $ref: '#/definitions/instructorLogin'
      responses:
        200:
          description: status ok
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists        
            
#################################
##### start Question Admin ######
#################################              
  /api/questionsByAdmin:
    get:
      tags:
      - admin_Questions
      summary: get all questions By Admin 
      description: |
        this link will return json data for all questions By Admin in system
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/admin_Questions'
      
    post:
      tags:
      - admin_Questions
      summary: adds an new question By Admin into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: questions_By_Admin
        description: add Question By Andmin to add
        schema:
          $ref: '#/definitions/admin_Questions'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
  /api/questionsByAdmin/{id}:
    get:
      tags:
      - admin_Questions
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get admin_Questions
      description: |
        get admin_Questions by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
              
#################################
### start Question students #####
#################################               
  /api/questionsByStudtents:
    get:
      tags:
      - student_Questions
      summary: get all questions By Studtents
      description: |
        this link will return json data for all questions By Studtents in system
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/student_Questions'
              
    post:
      tags:
      - student_Questions
      summary: adds an new questions By_Students into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: questions_By_Students
        description: add Question By Andmin to add
        schema:
          $ref: '#/definitions/student_Questions'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  
  /api/questionsByStudtents/{id}:
    get:
      tags:
      - student_Questions
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get instructor
      description: |
        get student_Questions by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok   
####################################
######### start schedule ###########
#################################### 
  /api/schedule:
    get:
      tags:
      - schedule
      summary: Get all schedule information  
      description: |
        GET data for all schedule information For (First-Second-Thrid-Fourth-Fifth) groups
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/schedule'
              
    post:
      tags:
      - schedule
      summary: Create a new schedule into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: admin
        description: Note groupNumber will post it as input type hidden when he choice level and totalMark will post it as input type hidden when user choice subjectName from select
        schema:
          $ref: '#/definitions/schedule'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        
  /api/schedule/{id}:
    get:
      tags:
      - schedule
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get schedule
      description: |
        get schedule by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok 
    delete:
      tags:
      - schedule
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: delete schedule
      description: |
        delete schedule by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is deleted successfully
          
    put:
      tags:
      - schedule
      summary: Update an existing schedule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path 
        type: number
        required: true 
      - in: body
        name: schedule
        description: schedule to update
        schema:
          $ref: '#/definitions/schedule'
      responses:
        200:
          description: item updated successfully
          
####################################
######### start subjects ###########
#################################### 

  /api/subjects:
    get:
      tags:
      - subjects
      summary: Get all subjects information  
      description: |
        GET data for all subjects information For (First-Second-Thrid-Fourth-Fifth) groups 
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/subjects'
              
    post:
      tags:
      - subjects
      summary: Create a new subject into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: subjects
        description: Note groupNumber will post it as input type hidden when he choice level
        schema:
          $ref: '#/definitions/subjects'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        
  /api/subjects/{id}:
    get:
      tags:
      - subjects
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get subject
      description: |
        get single subject by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
    
    delete:
      tags:
      - subjects
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: delete subject
      description: |
        delete subject by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is deleted successfully
          
    put:
      tags:
      - subjects
      summary: Update an existing subject
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path 
        type: number
        required: true 
      - in: body
        name: subjects
        description: subject to update
        schema:
          $ref: '#/definitions/subjects'
      responses:
        200:
          description: item updated successfully
          
  /api/subjects/groupNumber/{id}:
    get:
      tags:
      - subjectsGroupNumber
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get all subjects info matched with id of groupNumber
      description: |
        get All subjects indicate with id of groupNumber
        Example is http://syntax-eg.esy.es/api/subjects/groupNumber/1
        will get all subjects For First Level
        Example is http://syntax-eg.esy.es/api/subjects/groupNumber/2
        will get all subjects For second Level
        ...
        
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
    
  /api/schedules/groupNumber/{id}:
    get:
      tags:
      - schedulesGroupNumber
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get all schedules info matched with id of groupNumber
      description: |
       get All schedules indicate with id of groupNumber
        Example is http://syntax-eg.esy.es/api/schedules/groupNumber/1
        will get all schedules For First Level
        Example is http://syntax-eg.esy.es/api/schedules/groupNumber/2
        will get all schedules For second Level
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok 
#########################################
######### start activity_Type ###########
#########################################
  /api/activityType:
    get:
      tags:
      - activity_Type
      summary: Get all activites information  
      description: |
        GET data for all activites information For any day
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/membersRole'
   
    post:
      tags:
      - activity_Type
      summary: Create a new activity rcole into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: activity_Type
        description: activity to add
        schema:
          $ref: '#/definitions/activity_Type'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /api/activityType/{id}:
    get:
      tags:
      - activity_Type
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get activity_Type
      description: |
        get activity_Type by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok 
#######################################
######### start membersRole ###########
#######################################
  /api/membersRole:
    get:
      tags:
      - membersRole
      summary: Get all roles information  
      description: |
        GET data for all roles information For any member in application
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/membersRole'
   
    post:
      tags:
      - membersRole
      summary: Create a new role into system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: membersRole
        description: role to add
        schema:
          $ref: '#/definitions/membersRole'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
  /api/membersRole/{id}:
    get:
      tags:
      - membersRole
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get membersRole
      description: |
        get membersRole by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok 
######################################
######### start locations ############
######################################
  /api/locationsName:
    get:
      tags:
      - locationsName
      summary: Get all Locations Name   
      description: |
        GET data for locationsName 
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/locationsName'
              
    post:
      tags:
      - locationsName
      summary: Create a new location  into application
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: locationsName
        description: Create a new location
        schema:
          $ref: '#/definitions/locationsName'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        
  /api/locationsName/{id}:
    get:
      tags:
      - locationsName
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: get locationsName
      description: |
        get single location Name by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is ok
    
    delete:
      tags:
      - locationsName
      parameters:
        - name: id
          in: path 
          type: number
          required: true 
      summary: delete location Name
      description: |
        delete location Name by id
      produces:
      - application/json
      responses:
        200:
          description: that's mean is deleted successfully
          
    put:
      tags:
      - locationsName
      summary: Update an existing location Name
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path 
        type: number
        required: true 
      - in: body
        name: locationsName
        description: location Name to update
        schema:
          $ref: '#/definitions/locationsName'
      responses:
        200:
          description: item updated successfully
          
#########################################################
#-------------------- Start definitions ----------------#
#########################################################          
definitions:
  admin:
    type: object
    required:
    - username 
    - email
    - role
    - password
    properties:
      id:
        type: integer
        example: 1
      username:
        type: string
        example: "Refaat Aish"
      password:
        type: string
        example: "01012341234"
      email:
        type: string
        example: "refaat.aish.fciscu1@gmail.com"
      role:
        type: integer
        example: 1
          
  student:
      type: object
      required:
      - name
      - username 
      - password
      - email
      - level
      - telephone
      - role
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Refaat Aish"
        username:
          type: string
          example: "refo99"
        password:
          type: string
          example: "01012341234"
        email:
          type: string
          example: "refaat.aish.fciscu1@gmail.com"
        level:
          type: string
          example: "1"
        telephone:
          type: string
          example: "01003616844"
        role:
          type: string
          example: "1"
        created_at:
          type: string
          example: "2018-05-21 22:48:23"
        updated_at:
          type: string
          example: "2018-05-21 22:48:23"
  instructor:
      type: object
      required:
      - name
      - username 
      - password
      - email
      - subjectName
      - telephone
      - role
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Refaat Aish"
        username:
          type: string
          example: "refo99"
        password:
          type: string
          example: "01012341234"
        email:
          type: string
          example: "refaat.aish.fciscu1@gmail.com"
        subjectName:
          type: string
          example: "medicalTools"
        telephone:
          type: string
          example: "01003616844"
        role:
          type: string
          example: "1"
        created_at:
          type: string
          example: "2018-05-21 22:48:23"
        updated_at:
          type: string
          example: "2018-05-21 22:48:23"
          
  adminLogin:
    type: object
    required:
    - username 
    - password
    properties:
      username:
        type: string
        example: "zead"
      password:
        type: string
        example: "1111"
        
  studentLogin:
    type: object
    required:
    - username 
    - password
    properties:
      username:
        type: string
        example: "zead"
      password:
        type: string
        example: "1111" 
  
  instructorLogin:
    type: object
    required:
    - username 
    - password
    properties:
      username:
        type: string
        example: "zead"
      password:
        type: string
        example: "1111"
   
  admin_Questions:
      type: object
      required:
      - question
      - option1 
      - option2
      - option3
      - option4
      properties:
        id:
          type: integer
          example: 1
        question:
          type: string
          example: "Whats about this lect today?" 
        option1:
          type: string
          example: "bad"
        option2:
          type: string
          example: "good"
        option3:
          type: string
          example: "very good"
        option4:
          type: string
          example: "excellent"
          
  student_Questions:
      type: object
      required:
      - student_id
      - answer1 
      - answer2
      - answer3
      - answer4
      properties:
        student_id:
          type: integer
          example: 1
        student_info_link:
          type: string
          example: "http://syntax-eg.esy.es/api/students/4"
        answer1:
          type: string
          example: "bad"
        answer2:
          type: string
          example: "good"
        answer3:
          type: string
          example: "very good"
        answer4:
          type: string
          example: "excellent"
    
  students_in_Location:
    type: object
    required:
    - name
    - level
    - status
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "Refaat Aish"
      level:
        type: string
        example: "2"
      status:
        type: boolean
        example: 1
    
  schedule:
    type: object
    required:
    - day
    - instructorName
    - subjectName
    - startTime
    - endTime
    - type
    - Location
    - groupNumber
    - totalMark
    properties:
      id:
        type: integer
        example: 1
      day:
        type: string
        example: "Monday"
      instructorName:
        type: string
        example: "Dr/Hazem Tarek"
      subjectName:
        type: string
        example: "Medical tools"
      startTime:
        type: string
        example: "2"
      endTime:
        type: string
        example: "5"
      type:
        type: string
        example: "lecture" 
      Location:
        type: string
        example: "Hall 2"
      groupNumber:
        type: string
        example: "2"
      totalMark:
        type: string
        example: "100"

  subjects:
    type: object
    required:
    - subjectName
    - duration
    - totalMark
    - groupNumber
    properties:
      id:
        type: integer
        example: 1
      subjectName:
        type: string
        example: Medical tools
      duration:
        type: string
        example: '3'
      totalMark:
        type: string
        example: "100" 
      groupNumber:
        type: string
        example: "2" 
        
  subjectsGroupNumber:
    type: object
    properties:
      id:
        type: integer
        example: 1
      subjectName:
        type: string
        example: Medical tools
      duration:
        type: string
        example: '2'
      totalMark:
        type: string
        example: "100" 
      groupNumber:
        type: string
        example: "1" 
  
  schedulesGroupNumber:
    type: object
    properties:
      id:
        type: integer
        example: 1
      day:
        type: string
        example: "Monday"
      instructorName:
        type: string
        example: "Dr/Hazem Tarek"
      subjectName:
        type: string
        example: "Medical tools"
      startTime:
        type: string
        example: "2"
      endTime:
        type: string
        example: "5"
      type:
        type: string
        example: "lecture" 
      Location:
        type: string
        example: "Hall 2"
      groupNumber:
        type: string
        example: "2"
      totalMark:
        type: string
        example: "100"
        
  activity_Type:
    type: object
    required:
    - title
    - flag
    properties:
      id:
        type: integer
        example: 1
      title:
        type: string
        example: "lecture"
      flag:
        type: boolean
        example: 1
      created_at:
          type: string
          example: "2018-05-21 22:48:23"
      updated_at:
        type: string
        example: "2018-05-21 22:48:23"
        
        
  membersRole:
    type: object
    required:
    - accessNumber
    - title
    properties:
      id:
        type: integer
        example: 1
      accessNumber:
        type: string
        example: "0"
      title:
        type: string
        example: "admin"
        
  locationsName:
    type: object
    required:
    - locationName
    properties:
      id:
        type: integer
        example: 1
      locationName:
        type: string
        example: "Hall 3"
        
    
    
# Added by API Auto Mocking Plugin
# host: http://www.syntax-eg.esy.es/
schemes:
 - https
# host: x
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.coms
basePath: /DreamTeam33/GraduationProject_MSA/1.0.0
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com